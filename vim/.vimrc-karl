" karl's vimrc

" Plugins
"set runtimepath^=~/.vim/bundle/swift.vim
"set runtimepath^=~/.vim/bundle/vim-javascript
"
set nocompatible
syntax on
filetype on
filetype plugin on
filetype indent on

set history=500 	" keep command line history
set tabpagemax=100      " max tabs (default: 10)
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set wildmenu		" display completion matches in a status line
set scrolloff=5         " always keep lines above/below cursor

" Delay (ms) to wait for mappings, e.g. leader key
set timeout
set timeoutlen=3000

" Some new defaults.vim settings
" Delay (ms) to wait for keycodes.
" To test, go to insert mode, then escape, then O. (has to be capital O)
" The delay before insert mode happens again is this delay.
set ttimeout		" time out for key codes
set ttimeoutlen=100	" wait up to 100ms after Esc for special key

" Do not recognize octal numbers for Ctrl-A and Ctrl-X, most users find it
" confusing.
set nrformats-=octal

" Allow backspacing over everything in insert mode.
set backspace=indent,eol,start

" "." look in file's dir
" "" look in vim cwd
set path=.,,

" spell checking shouldn't check sentence capitalization
set spellcapcheck=

set encoding=utf-8      " better than latin1 default
set laststatus=2        " always show status line
set shortmess+=I        " Don't show intro
set showmatch           " briefly show matching bracket
"set title              " xterm title; not needed with status line
set visualbell
set wildmode=longest:list  " completion like bash
set wildignore+=*.o
set wildignore+=*.pyc
set wildignore+=*.swp

" editing
" These are just defaults; autocmd/filetype plugins can alter
set shiftwidth=4
set softtabstop=4       " should be == shiftwidth, so backspace unindents well
set smarttab            " hitting tab in front of a line indents SHIFTWIDTH
set expandtab           " tab / autoindentation puts in spaces
set ignorecase          " Search is normally insensitive
set smartcase           " Typing capital letters force case sensitivity

" We want gf to work in shell scripts with VARIABLE=/SOME/PATH
set isfname-==
set isfname-=,
set isfname-=#

" Show filetype in status line (ugh, needs to be more complex to also show ruler)
"set statusline=%f\ \ \ %y

" netrw browser can do tree view, use that by default.
" Press 'i' to toggle the 4 view styles: thin, long, multi-column, tree
let g:netrw_liststyle=3

" netrw browser: hide certain files
let g:netrw_list_hide = '\.o$,\.pyc$,\.swp$'


"
" Key Bindings
"

" Don't use Ex mode
map Q <Nop>

" Make space the (only) leader key.
let mapleader = " "

" Make quitting and saving more ergonomic
" space-q: confirm quits (asks to save if modified)
noremap <leader>q :confirm qa<cr>
" space-w: save
noremap <leader>w :w<cr>
" space-W: save via sudo (must confirm with enter)
" NB: This writes the file through "sudo tee <filename>"
noremap <Leader>W :w !sudo tee % > /dev/null

" Toggle settings easily.  The current value is then shown.
noremap <Leader>p :set paste!<cr>:set paste?<cr>
noremap <Leader>i :set ignorecase!<cr>:set ignorecase?<cr>
noremap <Leader>h :set hlsearch!<cr>:set hlsearch?<cr>
noremap <Leader>s :set spell!<cr>:set spell?<cr>

" Working with files
noremap <Leader>e :edit<space>
noremap <Leader>t :tabnew<cr>

" Buffer select
noremap <Leader>b :buffers<CR>:buffer<Space>
" Buffer switch back
noremap <Leader>, <c-^>
" File select (uses viminfo file history)
noremap <Leader>f :browse oldfiles<CR>

" Directory exploring - "toggle" file explorer tree 
" This is actually pretty buggy - it,will open multiple explorers if you actually
" did anything in the first the explorer window.
noremap <leader>x :Lexplore<cr>

" Cycling through buffers: ctrl-p=previous, ctrl-n=next
" I use this if I open a lot of files, e.g. "vi *.py"
" Note it would probably be better do do "vi -p *.py" to open in tabs
" Note: This overwrites a built in command, but who uses it instead of j/k?
noremap <C-n> :bnext<CR>
noremap <C-p> :bprev<CR>

" allow paste in visual mode
vnoremap p <Esc>:let current_reg = @"<CR>gvdi<C-R>=current_reg<CR><Esc>



"
" Abbreviations
"

iab pdoc """<cr>"""
iab ifmain if __name__ == "__main__":
iab #i #include



"
" Color theme
"

" Coding
hi PreProc      ctermfg=darkred        cterm=none
hi Statement    ctermfg=brown         cterm=none
hi Identifier   ctermfg=cyan            cterm=none
hi Type         ctermfg=darkgreen      cterm=none
hi Constant     ctermfg=darkmagenta    cterm=none

" The crappy python syntax doesn't distinguish docstring comments from normal strings
hi String       ctermfg=darkblue           cterm=none
hi Comment      ctermfg=darkblue           cterm=none

" VIM UX
hi SpellBad	ctermbg=yellow   ctermfg=red cterm=none
hi StatusLine   ctermfg=white ctermbg=darkblue cterm=none
hi StatusLineNC ctermfg=black ctermbg=lightgray cterm=none



"
" Functions
"

fun! KarlHighlightTabs()
    highlight SpecialKey term=standout ctermbg=yellow guibg=yellow
    set listchars=tab:>-
    set list
endfun

fun! KarlNoHighlightTabs()
    set nolist
endfun

fun! KarlDetectWhitespace()
python3 << endpython
import vim
nr_unclean = 0
for line in vim.current.buffer:
    if line.rstrip() != line:
        nr_unclean += 1

#print("Unclean Lines: %d" % nr_unclean)
#print("Name: %s" % vim.current.buffer.name)
cmd = "autocmd BufWritePre <buffer> call KarlStripTrailingWhitespace()"
if nr_unclean == 0:
    #print("Enabling Whitespace Trimming on Save")
    vim.command(cmd)
else:
    #print("Whitespace Trimming Disabled")
    pass
endpython
endfun

fun! KarlStripTrailingWhitespace()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun


if has("autocmd")
    autocmd BufNewFile,BufRead *.html setlocal shiftwidth=2

    " set fo+=a if you want autoformat.  Sometimes it is just annoying.
    autocmd BufNewFile,BufRead README,*.txt,*.adoc setlocal textwidth=78

    " public/private all the way to left margin
    autocmd BufNewFile,BufRead *.cpp,*.h setlocal cino+=g0

    " auto wrap comments in source files
    "autocmd BufNewFile,BufRead *.cpp,*.[chm],*.py,*.sh,*.html
                "\ setlocal fo+=r fo-=o fo-=t tw=78

    " press K to launch pydoc
    autocmd filetype python setlocal keywordprg=pydoc

    " Show hard tabs in source files
    autocmd BufNewFile,BufRead *.cpp,*.h,*.sql,*.sh
        \ call KarlHighlightTabs()
    autocmd filetype python
        \ call KarlHighlightTabs()

    "autocmd filetype python call KarlDetectWhitespace()
    "autocmd filetype python call KarlDetectWhitespace()
    "autocmd BufNewFile call KarlDetectWhitespace()
endif


" tmux fixes for ctrl-pageup
if &term == "screen-256color"
   set term=xterm-256color
endif
if &term == "tmux-256color"
   set term=xterm-256color
endif
